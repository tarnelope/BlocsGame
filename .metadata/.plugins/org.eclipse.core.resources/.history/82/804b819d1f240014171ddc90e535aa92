package Tetrominos;

import android.util.Log;

import com.bloc.blocs.TetrisBoard;
import com.bloc.blocs.Tile;

public class JPiece extends Tetromino{

	public JPiece() {
		super(Math.round(TetrisBoard.RIGHT_X-5*TetrisBoard.TILE_DIMEN), 
				Math.round(TetrisBoard.TOP_Y-2*TetrisBoard.TILE_DIMEN), 2, 2, false);
		setTetrominoType("square");
		drawSprite();
	}
	
	@Override
	public void drawSprite() {

		Tile t = new Tile(START_ROW, START_COL);
		tiles.add(t);
		s = t.getTile();
		
		Tile t2 = new Tile(-1, 0);
		tiles.add(t2);
		s.attachChild(t2.getTile());
		Tile t3 = new Tile(1, 0);
		tiles.add(t3);
		s.attachChild(t3.getTile());
		Tile t4 = new Tile(1, -1);
		tiles.add(t4);
		s.attachChild(t4.getTile());
	}

	@Override
	public float getOrigHeight() {
		return mHeight;
	}

	@Override
	public float getOrigWidth() {
		return mWidth;
	}

	@Override
	public void rotate() {
		s.setRotation(s.getRotation()+90);
	}
	
	public void checkLeftBound() {
		s.setPosition(TetrisBoard.LEFT_X, s.getY());
	}
	
	public void checkRightBound() {
		s.setPosition(TetrisBoard.RIGHT_X-2*TetrisBoard.TILE_DIMEN, s.getY());
	}
	
	public void fillTiles(TetrisBoard board) {
		float x = s.getX(); 
		float y = s.getY();
		
		switch (getRotationBy90()) {
			//J
			case 0:
				Log.d("fillTiles case 0", "x is "+x+" y is "+y);
				//Center
				Tile t1 = board.getTileAt(x, y);
				board.fillBooleanTileAt(x, y);
				t1.setIsFilled(true);
				t1.setTetromino(this);
				//Bottom
				Tile t2 = board.getTileAt(x, y+TetrisBoard.TILE_DIMEN);
				board.fillBooleanTileAt(x, y+TetrisBoard.TILE_DIMEN);
				t2.setIsFilled(true);
				t2.setTetromino(this);
				//Top
				Tile t3 = board.getTileAt(x, y-TetrisBoard.TILE_DIMEN);
				board.fillBooleanTileAt(x, y-TetrisBoard.TILE_DIMEN);
				t3.setIsFilled(true);
				t3.setTetromino(this);
				//Nub
				Tile t4 = board.getTileAt(x-TetrisBoard.TILE_DIMEN, y+TetrisBoard.TILE_DIMEN);
				board.fillBooleanTileAt(x-TetrisBoard.TILE_DIMEN, y+TetrisBoard.TILE_DIMEN);
				t4.setIsFilled(true);
				t4.setTetromino(this);
				break;
			case 1: 
				//Left	
				Tile t1a = board.getTileAt(x-TetrisBoard.TILE_DIMEN, y);
				board.fillBooleanTileAt(x-TetrisBoard.TILE_DIMEN, y);
				t1a.setIsFilled(true);
				t1a.setTetromino(this);
				//Center
				Tile t2a = board.getTileAt(x, y);
				board.fillBooleanTileAt(x, y);
				//t2a.setIsFilled(true);
				t2a.setTetromino(this);
				//Right
				Tile t3a = board.getTileAt(x+TetrisBoard.TILE_DIMEN, y);
				board.fillBooleanTileAt(x+TetrisBoard.TILE_DIMEN, y);
				t3a.setIsFilled(true);
				t3a.setTetromino(this);
				//Top Left Nub
				Tile t4a = board.getTileAt(x-TetrisBoard.TILE_DIMEN, y-TetrisBoard.TILE_DIMEN);
				board.fillBooleanTileAt(x-TetrisBoard.TILE_DIMEN, y-TetrisBoard.TILE_DIMEN);
				t4a.setIsFilled(true);
				t4a.setTetromino(this);
				break;
			case 2: //x: 60, y: 600
				Log.d("fillTiles case 2", "x is "+x+" y is "+y);
				//Top Right nub
				Tile t1b = board.getTileAt(x+TetrisBoard.TILE_DIMEN, y-TetrisBoard.TILE_DIMEN);
				board.fillBooleanTileAt(x+TetrisBoard.TILE_DIMEN, y-TetrisBoard.TILE_DIMEN);
				t1b.setIsFilled(true);
				t1b.setTetromino(this);
				//Top
				Tile t2b = board.getTileAt(x, y-TetrisBoard.TILE_DIMEN);
				board.fillBooleanTileAt(x, y-TetrisBoard.TILE_DIMEN);
				t2b.setIsFilled(true);
				t2b.setTetromino(this);
				//Bottom
				Tile t3b = board.getTileAt(x, y+TetrisBoard.TILE_DIMEN);
				board.fillBooleanTileAt(x, y+TetrisBoard.TILE_DIMEN);
				t3b.setIsFilled(true);
				t3b.setTetromino(this);
				//4th 
				Tile t4b = board.getTileAt(x, y);
				board.fillBooleanTileAt(x, y);
				t4b.setIsFilled(true);
				t4b.setTetromino(this);
				break;
			case 3:
				//x is 120
				Log.d("Case 3", "x is " + x);
				//Left	
				Tile t1c = board.getTileAt(x-TetrisBoard.TILE_DIMEN, y);
				board.fillBooleanTileAt(x-TetrisBoard.TILE_DIMEN, y);
				t1c.setIsFilled(true);
				t1c.setTetromino(this);
				//Center
				Tile t2c = board.getTileAt(x, y);
				board.fillBooleanTileAt(x, y);
				t2c.setIsFilled(true);
				t2c.setTetromino(this);
				//Right
				Tile t3c = board.getTileAt(x+TetrisBoard.TILE_DIMEN, y);
				board.fillBooleanTileAt(x+TetrisBoard.TILE_DIMEN, y);
				t3c.setIsFilled(true);
				t3c.setTetromino(this);
				//Bottom Right Nub
				Tile t4c = board.getTileAt(x+TetrisBoard.TILE_DIMEN, y+TetrisBoard.TILE_DIMEN);
				board.fillBooleanTileAt(x+TetrisBoard.TILE_DIMEN, y+TetrisBoard.TILE_DIMEN);
				t4c.setIsFilled(true);
				t4c.setTetromino(this);
				break;
		}
	}

	@Override
	public boolean isClearBelow(TetrisBoard board) {
		float x = s.getX();
		float y = s.getY();
		if (board.isBooleanTileFilled(x, y+TetrisBoard.TILE_DIMEN*2) || board.isBooleanTileFilled(x-TetrisBoard.TILE_DIMEN, y+TetrisBoard.TILE_DIMEN*2)) {
			//Log.d("JPiece", "Is not clear below");
			return false;
		} else {
			return true;
		}
		
	}
}
