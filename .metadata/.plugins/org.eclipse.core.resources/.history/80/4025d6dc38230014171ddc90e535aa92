package com.bloc.blocs;

import java.util.ArrayList;

import org.andengine.engine.camera.Camera;
import org.andengine.entity.primitive.Rectangle;
import org.andengine.entity.scene.Scene;

import android.util.Log;

public class TetrisBoard {
	
	private final static String TAG = "TetrisBoard";
	
	Camera mCamera;
	PlayScene mScene;
	private TetrisBoard instance;
	
	public final static int BOARD_WIDTH = 300;
	public final static int BOARD_HEIGHT = 660;
	public final static float TILE_DIMEN = 30;
	public final static int LEFT_X = 90;
	public final static int RIGHT_X = 390;
	public final static int TOP_Y= 60;
	public final static int BOTTOM_Y = 690;
	
	public final static int NUM_COLUMNS = 10;
	public final static int NUM_ROWS = 22;
	
	private boolean[][] mBooleanGrid; //True is filled, False is empty
	
	ArrayList<Integer> mFilledRows = new ArrayList<Integer>();
	private Tile[][] mTileArray;;
	
	public TetrisBoard getTetrisBoardInstance(Scene s) {
		if (instance == null)
			instance = new TetrisBoard(s);
		return instance;
	}
	
	public TetrisBoard(PlayScene s) {
		
		mBooleanGrid = new boolean[NUM_COLUMNS][NUM_ROWS];
		mTileArray = new Tile[NUM_COLUMNS][NUM_ROWS];
		mScene = s;
		drawGrid(s);
	}
	
	public Tile getTileAt(float x, float y) {
		int colNum = Math.round((x-LEFT_X)/TILE_DIMEN);
		int rowNum = Math.round((y-TOP_Y+TetrisBoard.TILE_DIMEN)/TILE_DIMEN);
		if (rowNum < NUM_ROWS && colNum < NUM_COLUMNS && rowNum > 0 && colNum > 0) {
			Tile t = mTileArray[colNum][rowNum];
			return t;
		} else {
			return new Tile(0, 0);
		}
	}
	
	public void fillBooleanTileAt(float x, float y) {
		int colNum = Math.round((x-LEFT_X)/TILE_DIMEN);
		int rowNum = Math.round((y-TOP_Y+TetrisBoard.TILE_DIMEN)/TILE_DIMEN);
		Log.d("boolean grid filled at", "col is "+colNum+" row is "+rowNum);
		if (colNum < NUM_COLUMNS && rowNum < NUM_ROWS && colNum >-1 && rowNum > -1) {
			mBooleanGrid[colNum][rowNum] = true;
		} 
	}
	
	public boolean isBooleanTileFilled(float x, float y) {
		int colNum = Math.round((x-LEFT_X)/TILE_DIMEN);
		int rowNum = Math.round((y-TOP_Y+TetrisBoard.TILE_DIMEN)/TILE_DIMEN);
		if (colNum < NUM_COLUMNS && rowNum < NUM_ROWS && colNum >-1 && rowNum > -1) {
			//Log.d("isBooleanTileFilled", "rowNum is "+rowNum+" colNum is "+colNum);
			return mBooleanGrid[colNum][rowNum];
		} else {
			return true;
		}
	}
	
	/*
	 * Purpose: To detect filled rows and add their index to the mFilledRows integer array.
	 */
	public void checkRows() {
		for (int i = NUM_ROWS-1; i >= 0; i--) {
			
			boolean allFilled = true;
			
			//Iterated through an entire row
			for (int j = 0; j < NUM_COLUMNS; j++) {
				if (mBooleanGrid[j][i] == false) {
					allFilled = false;
				} else { //update the boolean grid
					mBooleanGrid[j][i] = true;
				}
			}
			//What to do when we detect row is all filled
			if (allFilled) {
				Log.d(TAG, "Row "+i+" is filled!");
				mFilledRows.add(i);
			}
		}
	}
	
	public void updateBooleanGrid() {
		//If there are filled rows then...
		if (mFilledRows.size() != 0) { 
			//This will count rows from bottom to top
			for (int rowNum:mFilledRows) {
				
				//for (starting at the row above a filled row, as long as the number is greater than equal to 0, then decrement counter by 1)
				//This for loop is not working because only the filled are getting updated. They would need to decrement as well.
				for (int curRow = rowNum; curRow > 0; curRow--) {
					for (int colNum = 0; colNum < NUM_COLUMNS; colNum++) {
						mBooleanGrid[colNum][curRow] = mBooleanGrid[colNum][curRow-1];
					}	
					
				}
				
				//Create new row at top.
				for (int colNum = 0; colNum < NUM_COLUMNS; colNum++) {
					mBooleanGrid[colNum][0] = false;
				}
			}
			mFilledRows.clear();
		}
	}
	
	public void drawGrid(Scene s) {
		Tile tile;
		for (int col = 0; col < NUM_COLUMNS; col++) {
			for (int row = 0; row < NUM_ROWS; row++) {
				float x = TILE_DIMEN*col + LEFT_X;
				float y = TILE_DIMEN*row + TOP_Y;

				if (mBooleanGrid[col][row] == true ) {
					tile = new Tile(row, col, x, y, TILE_DIMEN, TILE_DIMEN, Blocs.getSharedInstance().cyanTile);
					tile.setIsFilled(true);
				} else {
					tile = new Tile(row, col, x, y, TILE_DIMEN, TILE_DIMEN, Blocs.getSharedInstance().grayTile);
					mBooleanGrid[col][row] = tile.isFilled(); //Should be entirely false
				}
				mTileArray[col][row] = tile;
				s.attachChild(tile.getTile());
			}
		}
	}
	
	public void redrawGrid(Scene s) {
		Tile tile;
		for (int col = 0; col < NUM_COLUMNS; col++) {
			for (int row = 0; row < NUM_ROWS; row++) {
				float x = TILE_DIMEN*col + LEFT_X;
				float y = TILE_DIMEN*row + TOP_Y;
				if (mBooleanGrid[col][row] == true ) {
					tile = new Tile(row, col, x, y, TILE_DIMEN, TILE_DIMEN, Blocs.getSharedInstance().cyanTile);
					tile.setIsFilled(true);
				} else {
					tile = new Tile(row, col, x, y, TILE_DIMEN, TILE_DIMEN, Blocs.getSharedInstance().grayTile);
					mBooleanGrid[col][row] = tile.isFilled(); //Should be entirely false
				}
				
				mTileArray[col][row] = tile;

				s.attachChild(tile.getTile());
			}
		}	
	}
	

}
