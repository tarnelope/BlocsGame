package com.bloc.blocs;

import java.util.ArrayList;
import java.util.Random;

import org.andengine.engine.camera.Camera;
import org.andengine.engine.handler.physics.PhysicsHandler;
import org.andengine.entity.Entity;
import org.andengine.entity.sprite.AnimatedSprite;

import android.util.Log;

public class GamePiece extends Entity {
	
	private ArrayList<Entity> pieceArray;
	public Entity piece;
	public static GamePiece instance;
	boolean moveable;
	Camera mCamera;
	
	private final PhysicsHandler physicsHandler;
	
	public static GamePiece getSharedInstance() {
		if (instance == null)
			instance = new GamePiece();
		return instance;
	}
	
	private GamePiece() {
		moveable = true;
		mCamera = Blocs.getSharedInstance().mCamera;
		pieceArray = Blocs.getSharedInstance().getPieceArray();
		
		int index = randInt(0, 7);
		//int index = 1;
		Log.d("GamePiece", "index is "+index);
		piece = pieceArray.get(index);
		piece.setColor(0.23f, 0.98f, 0.199f);
		piece.setPosition(mCamera.getWidth()/2, 60);
		

		physicsHandler = new PhysicsHandler(piece);
		piece.registerUpdateHandler(physicsHandler);
		//physicsHandler.setVelocityY(Blocs.getSharedInstance().gravity_rate);
	}
	
	public void releasePiece(float gravitySpeed) {
		if (!moveable) return;
		Log.d("GamePiece", "releasedPiece");
		physicsHandler.setVelocityY(Blocs.getSharedInstance().gravity_rate);
		
		if (gravitySpeed != 0) {
			Log.d("gravity speed is ", gravitySpeed);
			//Left Limit
	        int lL = 90;
	        //Right Limit
	        int rL = 390;
	        //Lower Limit
	        int lowL = 630; 
	       
	        float newX;
	        float newY;
	        
	        if (piece.getY() <= lowL) {
	        	newY = piece.getY() + gravitySpeed;
	        } else {
	        	newY = lowL;
	        }
	        
	        piece.setPosition(piece.getX(), newY);
	       /* if (piece.getX() <= lL) {
	        	newX = lL;
	        } */
	        
		}
	}
	
	public static int randInt(int min, int max) {

	    // NOTE: Usually this should be a field rather than a method
	    // variable so that it is not re-seeded every call.
	    Random rand = new Random();

	    // nextInt is normally exclusive of the top value,
	    // so add 1 to make it inclusive
	    int randomNum = rand.nextInt((max - min) + 1) + min;

	    return randomNum;
	}

}
