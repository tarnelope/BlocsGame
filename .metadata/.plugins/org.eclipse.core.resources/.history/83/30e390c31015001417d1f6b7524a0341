package com.bloc.blocs;

import org.andengine.engine.camera.Camera;
import org.andengine.engine.handler.IUpdateHandler;
import org.andengine.entity.Entity;
import org.andengine.entity.primitive.Rectangle;
import org.andengine.entity.scene.Scene;
import org.andengine.entity.scene.background.Background;
import org.andengine.entity.sprite.Sprite;
import org.andengine.extension.physics.box2d.PhysicsWorld;

import android.util.Log;



public class PlayScene extends Scene {
	
	Camera mCamera;
	public GamePiece gamePiece;
	
	public PhysicsWorld physicsWorld;
	
	public Entity grid;
	
	Sprite tile;

	public PlayScene() {
		setBackground(new Background(0.1f, 0.6f, 0.134f));
		mCamera = Blocs.getSharedInstance().mCamera;
		
		TetrisBoard board = new TetrisBoard(this);
		final Rectangle ground = new Rectangle(board.LEFT_X, board.BOTTOM_Y+board.TILE_DIMEN, board.BOARD_WIDTH, 2, Blocs.getSharedInstance().getVertexBufferObjectManager());
		ground.setColor(0f, 0f, 0f);
		
		gamePiece = new GamePiece();
		tile = new Sprite(200, 200, Blocs.getSharedInstance().cyanTile, Blocs.getSharedInstance().getVertexBufferObjectManager());
		attachChild(gamePiece.piece);
		attachChild(tile);
		attachChild(ground);
		
		registerUpdateHandler(new IUpdateHandler() {
			
			@Override
			public void reset() {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void onUpdate(float pSecondsElapsed) {
				if (tile.collidesWith(ground)) {
					Log.d("PlayScene", "piece touched ground");
				}
				
				
			}
		});
		
		Blocs.getSharedInstance().setCurrentScene(this);
		
	}
	
	/*private Entity boundedGrid() {
		Entity playGrid = new Entity(0, 0);
		
//x, y, width, height
		final Rectangle ground = new Rectangle(LEFT_X, BOTTOM_Y, BOARD_WIDTH, 2, Blocs.getSharedInstance().getVertexBufferObjectManager());
		final Rectangle left = new Rectangle(LEFT_X, TOP_Y, 2, BOARD_HEIGHT, Blocs.getSharedInstance().getVertexBufferObjectManager());
		final Rectangle right = new Rectangle(RIGHT_X, TOP_Y, 2, BOARD_HEIGHT, Blocs.getSharedInstance().getVertexBufferObjectManager());
		
		playGrid.attachChild(right);
		playGrid.attachChild(left);
		playGrid.attachChild(ground);
		
		return grid;
	}
	
	public Entity getGridInstance() {
		if (grid == null) {
			grid = boundedGrid();
		} 
		return grid;
	} */
	
	public void releasePiece() {
		gamePiece.releasePiece(Blocs.getSharedInstance().gravity_rate);
	}
	
}
