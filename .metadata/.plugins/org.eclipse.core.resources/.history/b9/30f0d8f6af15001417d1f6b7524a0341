package com.bloc.blocs;

import org.andengine.engine.camera.Camera;
import org.andengine.engine.handler.IUpdateHandler;
import org.andengine.entity.Entity;
import org.andengine.entity.scene.IOnSceneTouchListener;
import org.andengine.entity.scene.Scene;
import org.andengine.entity.scene.background.Background;
import org.andengine.entity.sprite.Sprite;
import org.andengine.extension.physics.box2d.PhysicsWorld;
import org.andengine.input.touch.TouchEvent;

import android.hardware.SensorManager;
import android.util.Log;
import android.view.GestureDetector;
import android.view.GestureDetector.OnGestureListener;
import android.view.MotionEvent;

import com.badlogic.gdx.math.Vector2;



public class PlayScene extends Scene implements IOnSceneTouchListener {
	
	Camera mCamera;
	private GestureDetector gestureDetector;
	
	public PhysicsWorld physicsWorld;
	public Entity grid;
	TetrisPiece tetrisPiece;
	
	Sprite magLog;
	Sprite currentPiece;
	
	private float counter = 0.0f;
	
	public PlayScene() {
		
		setBackground(new Background(0.1f, 0.6f, 0.134f));
		mCamera = Blocs.getSharedInstance().mCamera;
		
		physicsWorld = new PhysicsWorld(new Vector2(0, SensorManager.GRAVITY_EARTH), false);
		
		final TetrisBoard board = new TetrisBoard(this);

		addNewPiece();
	
		registerUpdateHandler(new IUpdateHandler() {
			
			@Override
			public void reset() {
				// TODO Auto-generated method stub
				
			}
			
			float counter = 0;
			@Override
			public void onUpdate(float pSecondsElapsed) {
				counter += pSecondsElapsed;
				if (currentPiece.collidesWith(board.getGround())) {
					Log.d("PlayScene", "COLLIDED! at "+currentPiece.getY());
					tetrisPiece.setMoveable(false);
					float y = board.getGround().getY();
					currentPiece.setPosition(currentPiece.getX(), y-currentPiece.getHeight());
					addNewPiece();
				}
				if (counter > 0.5 && tetrisPiece.moveable) {
					counter = 0;
					currentPiece.setPosition(currentPiece.getX(), currentPiece.getY()+board.TILE_DIMEN);
				}
				
				
				
			}
		});
		
		gestureDetector = new GestureDetector(new OnGestureListener() {
			
			@Override
			public boolean onSingleTapUp(MotionEvent e) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public void onShowPress(MotionEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
					float distanceY) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public void onLongPress(MotionEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
					float velocityY) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public boolean onDown(MotionEvent e) {
				// TODO Auto-generated method stub
				return false;
			}
		});
		
		Blocs.getSharedInstance().setCurrentScene(this);
		setOnSceneTouchListener(this);
		
	}
	
	@Override
	public boolean onSceneTouchEvent(Scene pScene, final TouchEvent pSceneTouchEvent)
	{
	    if (pSceneTouchEvent.isActionDown())
	    {
	    	float origX = pSceneTouchEvent.getX();
	    	if (pSceneTouchEvent.getAction() == TouchEvent.ACTION_MOVE) {
	    		float newX = pSceneTouchEvent.getX();
	    		float deltaX = origX - newX;
	    		if (Math.abs(deltaX) > 60) {
	    			Log.d("PlayScene", "deltaX is "+deltaX+" MOVED!!!");
	    			tetrisPiece.movePieceHorizontally(deltaX);
	    		}
	    	}
	    	Log.d("PlayScene", "TOUCH!");
	        tetrisPiece.rotatePieceCCW();
	    }
	    return false;
	}
	
	public void addNewPiece() {
		tetrisPiece = new TetrisPiece();
		currentPiece = tetrisPiece.getPiece();
		attachChild(currentPiece);
	}
	
	
}
